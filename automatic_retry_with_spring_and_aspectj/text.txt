Automatic retry with Spring and AspectJ

Have you ever experienced problems with services which fail due to unforeseen, unpredictable errors? Such errors typically include connection resets, socket timeouts and so on. If the service is idempotent (http://en.wikipedia.org/wiki/Idempotence), you typically wish to just log the error and retry to prevent the user from noticing the problems. But do you really want to clutter your code with the same retry logic everywhere?

With AspectJ and Spring, creating cross-cutting functionality for automatic retries is easy!

First, we need to create a retry annotation which accepts some parameters:

[code]
package no.bring.booking.service.retry;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
/**
 * Specify that the given call should be retried a number of times if an exception is thrown.
 *
 * Requires the {@link RetryAspect} to be registered as a bean.
 */
public @interface Retry {

    int attempts() default 3;

    /**
     * Exception classes to immediately rethrow
     */
    Class<? extends Exception>[] noRetryFor() default {};

}
[/code]

We then need to create an Aspect which creates a pointcut arround any @Before annotated methods. **Note that this class must be registered as a Spring bean.**

[code]
package no.bring.booking.service.retry;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class RetryAspect {

    private static final Logger LOG = LoggerFactory.getLogger(RetryAspect.class);

    @Around(value = "@annotation(retry)", argNames = "retry")
    public Object invokeWithRetries(ProceedingJoinPoint joinPoint, Retry retry) throws Throwable {
        int attemptsRemaining = retry.attempts();

        Exception lastException;
        do {
            try {
                return joinPoint.proceed(joinPoint.getArgs());
            }
            catch (Exception e) {
                if (isInstanceOfOneOf(retry.noRetryFor(), e)) {
                    throw e;
                }
                else {
                    lastException = e;
                    attemptsRemaining--;

                    if (attemptsRemaining > 0) {
                        log(joinPoint, attemptsRemaining, e);
                    }
                }
            }
        }
        while(attemptsRemaining >= 0);

        throw lastException;
    }

    private void log(ProceedingJoinPoint joinPoint, int attemptsRemaining, Exception e) {
        LOG.warn("Got " + e.getClass() + " with message '" + e.getMessage() +
                "' when trying to invoke " + joinPoint.getTarget().getClass()  + "." + joinPoint.getSignature().getName() + ". "
                + attemptsRemaining  + " attempts remaining...");
    }

    private boolean isInstanceOfOneOf(Class<? extends Exception>[] classes, Exception e) {
        for (Class<? extends Exception> aClass : classes) {
            if (aClass.isAssignableFrom(e.getClass())) {
                return true;
            }
        }

        return false;
    }


}
[/code]

Lastly, you need to make sure that AspectJ and Spring-AOP is on your classpath, for example with these maven dependencies:

[code]
      <dependency>
        <groupId>org.aspectj</groupId>
        <artifactId>aspectjweaver</artifactId>
        <version>${aspectj.version}</version>
      </dependency>
      <dependency>
        <groupId>org.aspectj</groupId>
        <artifactId>aspectjrt</artifactId>
        <version>${aspectj.version}</version>
      </dependency>

[/code]